# card_stage_effect_grammar.treetop
# You can use a .tt extension instead if you wish
module Card::Stage
	grammar Effect
		include Card::Effect

		rule body
			( activation_cost )?
			(
				action once_per_turn? divider? /
				once_per_turn
			)*
			(
				don_investment divider? /
				rest_card_investment divider?
			)*
			(
				leader_condition
			)*
			(
				draw_sentence and_clause? trash_sentence? divider? trash_sentence? /
				rest_opponent_sentence /
				add_don_sentence /
				none / empty
			) <ShallowParsedQuery>
		end

	  rule draw_sentence
	    draw up_to? integer card space?
	  end

	  rule trash_sentence
	    may_clause? trash
	    up_to? integer
	    ( card / event or_clause? / stage or_clause? )+
	    your_hand?
	    dot? space?
	  end

		rule rest_opponent_sentence
			rest ( up_to? integer / all) ( opponent / your ) character space?
		end

		rule activation_cost
		  don_cost space?
		end

		rule leader_condition
			if_clause ( your / opponent ) leader
			( 'has the ' of_type / 'is ' has_name )
			divider space? # <LeaderCondition>
		end

		rule rest_card_investment
			may_clause? rest
			( this / up_to? integer )
			( card / stage )
			space?
		end

		rule add_don_sentence
			('Add ' / 'add ') up_to? integer ( rested / active )? don card
			'from your ' don 'deck' space? ( 'as active' / 'and rest it')
		end
	end
end

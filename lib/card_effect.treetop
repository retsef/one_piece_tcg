# card_effect_grammar.treetop
# You can use a .tt extension instead if you wish
class Card
	grammar Effect
		rule body
			(qualifier / sentence / divider / dot)* <ShallowParsedQuery>
		end

		rule qualifier
			( trait space trait_description / action space once_per_turn ) space? <QualifierNode>
		end

		rule sentence
			( keyword / integer )+ space? <SentenceNode>
		end

		rule action
			('[Main]' / '[Activate: Main]' /
			'[Your Turn]' / "[Opponent's Turn]" / '[End of Your Turn]' /
			"[On Your Opponent's Attack]" / '[When Attacking]' /
			'[On Play]' / '[Counter]') <IdentifierLiteral>
		end

		rule once_per_turn
			'[Once Per Turn]' <OncePerTurnLiteral>
		end

		rule trait
			('[Blocker]' / '[Rush]' / '[Banish]' / '[Double Attack]') <TraitLiteral>
		end

		rule trait_description
			'(' (
				'This card can attack on the turn in which it is played.' /
				'After your opponent declares an attack, you may rest this card to make it the new target of the attack.' /
				'When this card deals damage, the target card is trashed without activating its Trigger.' /
				'This attack deals 2 damage.'
			) ')'
		end

		rule trigger
		 ( don / sentence )
		end

		rule don
			'DON!!' space? <DonLiteral>
		end

		rule don_cost
			'[' ( don 'x' integer ) ']' <DonCostLiteral>
		end

		rule don_cost_description
			'(' (
				'You may rest the specified number of DON!! cards in your cost area.' /
				'You may return the specified number of DON!! cards from your field to your DON!! deck.'
			) ')'
		end

		rule identifier
			'[' ( keyword ) ']' <IdentifierLiteral>
		end

		rule target
			'{' ( keyword ) '}' <TargetLiteral>
		end

		rule keyword
			[a-zA-Z]+ <TermLiteral>
		end

		rule integer
			('+' / '-')? [0-9]+ <IntegerLiteral>
		end

		rule dot
			'.' <TermLiteral>
		end

		rule none
			'-' <TermLiteral>
		end

		rule space
			[ \t\n\r]* <TermLiteral>
		end
	end
end
